# 赋值
# 变量之间的赋值，其实就是给当前内存的对照新增一个标签而已

import copy
a = [1, 2, 3]
b = a
# 指向的都是同一个内存地址  修改时（不是全部替换）a b都会变化
# 2343138376256 2343138376256 140726154417824 140726154417824
print(id(a), id(b), id(a[0]), id(b[0]))

b[0] = 5
print(a, b)  # [5, 2, 3] [5, 2, 3]

# 全部替换时不会影响到原数据
b = [4, 4, 5]
print(a, b)  # [5, 2, 3] [4, 4, 5]

"""
    浅拷贝
    浅拷贝会创建新对象，其内容非原对象本身的引用，而是原对象内第一层对象的引用
    浅拷贝有三种形式:切片操作、工厂函数、copy模块中的copy函数
"""
a = [1, 2, 3]
b = a.copy()
# 存储地址有变化、内容地址未变化
# [1, 2, 3] [1, 2, 3] 2016279471296 2016250050880 140726154417824 140726154417824
print(a, b, id(a), id(b), id(a[0]), id(b[0]))

# 内存地址有变化 数字、字符串、布尔修改都不会对原数据产生影响
b.append(4)
print(a, b)  # [1, 2, 3][1, 2, 3, 4]

# 修改父对象时对原数据不会产生影响
# 修改（不是替换）包含子对象的父对象时会产生影响
a = [1, 2, 3, [4, 5]]
b = a.copy()
b[0] = 6
print(a, b)  # [1, 2, 3, [4, 5]] [6, 2, 3, [4, 5]]

# 修改子对象的内容 都会变化
b[-1].pop()
print(a, b)  # [1, 2, 3, [4]] [6, 2, 3, [4]]

# 直接替换 不会变化
b[-1] = 9
print(a, b)  # [1, 2, 3, [4]] [6, 2, 3, 9]

"""
    深拷贝
    copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象
"""

# 深拷贝不会对原数据产生影响
a = [1, 2, 3, [4, 5]]
b = copy.deepcopy(a)
b[-1].pop()
print(a, b)  # [1, 2, 3, [4, 5]] [1, 2, 3, [4]]
