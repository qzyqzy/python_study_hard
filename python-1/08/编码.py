# ASCII码
"""
    标准ascii码使用7为二进制数（0-127）

    问题：
        在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个字符时不够的
        比如中文，汉字远远大于128个字符的
"""

# GBK编码
"""
    由于ascii码不支持中文，所以当中国人用到计算机时，就需要另一种编码规则
    于是，国人就定义了一套编码规则：当字符小于127位时，与ASCII的字符相同，但当两个大于127的字符连接在一起时，就代表一个汉字，第一个字节称为高字节（从0xA1-0xF7）,第二个字节为低字节（从0xA1-0xFE）,这样大约可以组合7000多个简体汉字。这个规则叫做GB2312
    但是由于中国汉字很多，有些字无法表示，于是重新定义了规则：  不在要求低字节一定是127之后的编码，只要第一个字节是大于127，就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。这种扩展之后的编码方案称之为GBK标，包括了GB2312的所有内容，同时新增了近20000个新的汉字（包括繁体字）和符号。
    但是，中国有56个民族，所以，我们再次对编码规则进行了扩展，又加了近几千个少数民族的字符，于是再次扩展后得编码叫做GB18030。
    中国的程序员觉得这一系列编码的标准是非常的好，于是统统称他们叫做"DBCS"（Double Byte Charecter Set 双字节字符集）。
"""


# UNICODE编码
"""
    因为世界国家很多，每个国家都定义一套自己的编码标准，结果相互之间谁也不懂谁的编码，就无法进行很好的沟通交流
    定义一套编码方案来解决所有国家的编码问题，这个新的编码方案就叫做Unicode
    每个字符必须使用俩个字节，即用16位二进制来表示所有的字符，对于ASCII编码表里的字符，保持其编码不变，只是将长度扩展到了16位，其他国家的字符全部统一重新编码。
"""

# UTF-8 (UTF-8 是 Unicode 的实现方式之一) UTF-16、UTF-32

"""
    由于传输ASCII表里的字符时，实际上可以只用一个字节就可以表示，所以，这种编码方案在传输数据比较浪费带宽，存储数据比较浪费硬盘。
    使用的字节数可变，这个变化是根据 Unicode 编号的大小有关，编号小的使用的字节就少，编号大的使用的字节就多。

"""

# python 使用的是 unicode编码
# 用什么编码就要用什么解码

name = 'qzy'
namecode = 'qzy'.encode('UTF-8')
print(namecode)  # b'qzy'

print(namecode.decode('UTF-8'))  # qzy
