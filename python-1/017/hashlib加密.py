"""
摘要算法，也叫做加密算法，或者是哈希算法，散列算法等等
简单来说就是做加密和校验使用，它的工作原理给大家简单描述一下：它通过一个函数，把任意长度的数据按照一定规则转换为一个固定长度的数据串（通常用16进制的字符串表示）
"""

"""
hashlib的特征以及使用要点
    bytes类型数据 ---> 通过hashlib算法 ---> 固定长度的字符串
    不同的bytes类型数据转化成的结果一定不同
    相同的bytes类型数据转化成的结果一定相同
    此转化过程不可逆
    
hashlib的主要用途有两个：
    密码的加密
    文件一致性校验     
"""

# hashlib模块就相当于一个算法的集合，这里面包含着很多的算法，算法越高，转化成的结果越复杂，安全程度越高，相应的效率就会越低

# 普通加密
import hashlib

pwd = '123'
md5 = hashlib.md5()
md5.update(pwd.encode('utf-8'))
print(md5.hexdigest())  # 202cb962ac59075b964b07152d234b70

# 加密级别是最低的，相对来说不很安全。虽然说hashlib加密是不可逆的加密方式
# 用最low的方式，空间换时间。把常用的一些密码比如：123456,111111,以及他们的md5的值做成对应关系，类似于字典
# 只要空间足够大，那么里面容纳的密码会非常多，利用空间换取破解时间。 所以针对刚才说的情况，我们有更安全的加密方式：加盐


# 加盐加密

# 固定的盐
# 如果通过手段窃取到你这个固定的盐之后，也是可以破解出来的。所以，我们还可以加动态的盐
md5 = hashlib.md5('固定的盐'.encode('utf-8'))
md5.update(pwd.encode('utf-8'))
print(md5.hexdigest())  # 12e0174cfcf5eaa1ccca5bc8ea06b0b7

# 动态的盐
# 比如取用户的名字固定的一段字符串
# 这样，安全性能就大大提高了
# 一般的企业用MD5就够用了
# 但是对安全要求比较高的企业，比如金融行业，MD5加密的方式就不够了
# 得需要加密方式更高的，比如sha系列，sha1,sha224,sha512等等，数字越大，加密的方法越复杂，安全性越高，但是效率就会越慢
md5 = hashlib.sha1('固定的盐'.encode('utf-8'))
md5.update(pwd.encode('utf-8'))
print(md5.hexdigest())  # 516c479e4ed807ccdbe0dec5e959ee86191bdd6e

# 文件一致性校验
# 文件初始时 设置内容 我们先计算出原始的md5值
f = open('文件一致性校验.py', 'rb')
md5 = hashlib.sha1()
md5.update(f.read())
f.close()
print(md5.hexdigest())  # dd6edb1aeb0edcfe3f5dfd1b94cf778a06935fb9

# 我们修改文件后再次计算
# 36d2a4b79cf427d611ac0dc9bacec30579773fa4
# 此时得到的值是不一致的
